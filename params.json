{
  "name": "Practical machine learning",
  "tagline": "",
  "body": "\r\n# \"Practical Machine Learning Project\"\r\n### author: \"jemin lee (Ph.D Candidate, Chungnam National University, South Korea)\"\r\n### date: \"2015년 11월 22일\"\r\n### output: html_document\r\n---\r\n\r\nIntroduction\r\n-----------------------------------------\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: <http://groupware.les.inf.puc-rio.br/har> (see the section on the Weight Lifting Exercise Dataset). \r\n\r\n\r\n\r\nData\r\n-----------------------------------------\r\nThe training data for this project are available here: \r\n<https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv>\r\n\r\nThe test data are available here: \r\n<https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv>\r\n\r\nThe data for this project come from this source: <http://groupware.les.inf.puc-rio.br/har>.\r\n\r\nThe data can also be downloaded using the following R scoprt:\r\n```{r,cache=TRUE}\r\n# essential library \r\nlibrary(caret)\r\nlibrary(randomForest)\r\nlibrary(corrplot)\r\n\r\ndownloadFiles <- function(dataURL = \"\", destF = \"t.csv\")\r\n{\r\n    if(!file.exists(destF)){\r\n        download.file(dataURL, destF, method=\"curl\")\r\n    }else{\r\n        message(\"data already downloaded.\")\r\n    }\r\n}\r\ntrainURL<-\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\r\ntestURL <-\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\r\ndownloadFiles(trainURL, \"pml-training.csv\")\r\ndownloadFiles(testURL, \"pml-testing.csv\")\r\n```\r\nLoad the data from csv files.\r\n```{r,cache=TRUE}\r\ntrain <- read.csv(\"./pml-training.csv\")\r\ntest <- read.csv(\"./pml-testing.csv\")\r\n```\r\nCheck the structure of data and the number of each class in training set.\r\n```{r,cache=TRUE}\r\ndim(train)\r\ntable(train$classe)\r\n```\r\nSplit training dataset into training and validation for evaluating model.\r\nWe did cross validation using createDataPartition().\r\nThis function guarantees diverse distribution in each column.\r\n```{r,cache=TRUE}\r\nset.seed(123456)\r\ninTrain <- createDataPartition(train$classe, p = 3/4, list = FALSE)\r\ntrainingSet <- train[inTrain, ]\r\n# create validation set for testing in sample error\r\nvalidationSet <- train[-inTrain, ]\r\n```\r\n\r\n\r\nFetures Slection for makeing model\r\n-----------------------------------------\r\nCheck the near zero covariates(featrues).\r\n```{r,cache=TRUE}\r\nnzvMatrix <- nearZeroVar(trainingSet, saveMetrics = TRUE)\r\ntrainingSet_rmovedZero <- trainingSet[,!nzvMatrix$nzv]\r\n```\r\nDeal with missing value.\r\n```{r,cache=TRUE}\r\n# first option to handle missing value:\r\n# remove columns, containing missing value over 50%, out of all data.\r\ncntlength <- sapply(trainingSet_rmovedZero, function(x) {\r\n    sum(!(is.na(x) | x == \"\"))\r\n})\r\ncolumnNA_frist <- names(cntlength[cntlength < 0.5 * length(trainingSet$classe)])\r\n\r\n# second option to handle missing value:\r\n# remove all columns, contating a missing value.\r\nconditionColumnsNA <- apply(trainingSet_rmovedZero,2,function(x) table(is.na(x))[1]!=dim(trainingSet_rmovedZero)[1])   \r\ncolumnNA_second <- names(trainingSet_rmovedZero)[conditionColumnsNA]\r\n```\r\n\r\nDiscards unsueful covariates(feautres), beacuse these featrues are descriptive features.\r\nSo, we consider only numeric type of covariate from HAR sensor.\r\n```{r,cache=TRUE}\r\ndescriptiveColumns <- c(\"X\", \"user_name\", \"raw_timestamp_part_1\", \"raw_timestamp_part_2\", \r\n                 \"cvtd_timestamp\", \"new_window\", \"num_window\")\r\nremoveColumns <- c(descriptiveColumns, columnNA_second)\r\nrefinedTrainingSet <- trainingSet_rmovedZero[, !names(trainingSet_rmovedZero) %in% removeColumns]\r\n```\r\n\r\nRemove highly correlated covariates(features).\r\nTo comput correlation, make set without classes.\r\n```{r,cache=TRUE}\r\ncorrM <- cor(subset(refinedTrainingSet, select=-c(classe)))\r\ncorrplot(corrM, method=\"circle\",tl.cex=0.6)\r\n```\r\nDetect high correlation.\r\n```{r,cache=TRUE}\r\nhighCorr <- findCorrelation(corrM, cutoff = .75)\r\n```\r\nTo make concrete data set, combine two data, classe and data excluding high correlation of columns.\r\n```{r,cache=TRUE}\r\nremoveHighCorrTrainSet <- cbind(classe=refinedTrainingSet$classe,refinedTrainingSet[,-highCorr])  \r\n```\r\n\r\n\r\nMaking Model using Random Forest Algorithm\r\n-----------------------------------------\r\n```{r,cache=TRUE}\r\nrfModel <- randomForest(classe ~ ., data = removeHighCorrTrainSet, importance = TRUE, ntrees = 10)\r\nrfModel\r\nplot(rfModel)\r\nvarImpPlot(rfModel,cex=.5)  \r\n```\r\n\r\n\r\nTesting Constructed Model\r\n-----------------------------------------\r\nWe test model in term of in sample error and out of sample error.\r\n```{r,cache=TRUE}\r\n# training sample\r\nptraining <- predict(rfModel, removeHighCorrTrainSet)\r\nprint(confusionMatrix(ptraining, removeHighCorrTrainSet$classe))\r\n# out of sample\r\npvalidation <- predict(rfModel, validationSet)\r\nprint(confusionMatrix(pvalidation, validationSet$classe))\r\n```\r\nThe reason why out of sample error appared is probably noise called outlier or somehow it is beacuse our model is overffting.\r\n\r\n\r\nPredicting test set, including no class data\r\n-----------------------------------------\r\nTest set prediction\r\n```{r,cache=TRUE}\r\nptest <- predict(rfModel, test)\r\nptest\r\n```\r\n\r\nWe then save the output to files based on instructions.\r\nWe can post it to the submission page.\r\n```{r,cache=TRUE}\r\nanswers <- as.vector(ptest)\r\npml_write_files = function(x){\r\n    n = length(x)\r\n    for(i in 1:n){\r\n        filename = paste0(\"problem_id_\",i,\".txt\")\r\n        write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\r\n    }\r\n}\r\npml_write_files(answers)\r\n```\r\n\r\nConclusion\r\n-----------------------------------------\r\nIn this project, we made predition model based on Human Actiity Recogniton (HAR) project. To build prediction model, we took several pre-processing steps that are zero variance features analysis, removing missing value and decriptive featrues, and deleting high correlation features. By doing that, we reduced computating time of bulding model and achieved high accruacy of prediction. Fortunately, RandomFrest-Model we made attained 100% accruacy in term of 20 samples in Test-set. However, 100% accruacy is not make sense. For precise evaluation, we need to get larger data set than now.\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}